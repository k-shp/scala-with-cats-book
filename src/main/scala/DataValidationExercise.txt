mport cats.data.{Validated, NonEmptyList, Kleisli}
import cats.data.Validated._
import cats.implicits._
import cats._

sealed trait Predicate[E, A] {  
  import Predicate._
  def and(that: Predicate[E, A]): Predicate[E, A] = And(this, that)
  def or(that: Predicate[E, A]): Predicate[E, A] = Or(this, that)

  def apply(a: A)(implicit s: Semigroup[E]): Validated[E, A] = {
    this match {
      case Pure(func) => func(a)
      case And(left, right) => (left(a), right(a)).mapN((_, _) => a)
      case Or(left, right) =>
        (left(a), right(a)) match {
          case (Invalid(e1), Invalid(e2)) => Invalid(e1 |+| e2)
          case _ => Valid(a)
      }
    }
  }
  
  def run(implicit s: Semigroup[E]): A => Either[E, A] = 
    (a: A) => this(a).toEither
}

object Predicate {

  final case class And[E, A](
    left: Predicate[E, A],
    right: Predicate[E, A]
  ) extends Predicate[E, A]

  final case class Or[E, A](
    left: Predicate[E, A],
    right: Predicate[E, A]
  ) extends Predicate[E, A]

  final case class Pure[E, A](
    func: A => Validated[E, A]
  ) extends Predicate[E, A]
  
  def apply[E, A](f: A => Validated[E, A]): Predicate[E, A] = Pure(f)
  
  def lift[E, A](err: E, fn: A => Boolean): Predicate[E, A] = Pure(a => if
(fn(a)) a.valid else err.invalid )
}

// sealed trait Check[E, A, B] {
//   import Check._
  
//   def apply(a: A)(implicit s: Semigroup[E]): Validated[E, B] 
  
//   def map[C](func: B => C): Check[E, A, C] = Map[E, A, B, C](this, func)
  
//   def andThen[C](that: Check[E, B, C]): Check[E, A, C] = AndThen[E, A, B,
C](this, that)
// }

// object Check {
//   final case class Map[E, A, B, C](check: Check[E, A, B], 
//                                    func: B => C) extends Check[E, A, C] {
//     def apply(in: A)(implicit s: Semigroup[E]): Validated[E, C] =
check(in).map(func)
//   }
  
//   final case class AndThen[E, A, B, C](check1: Check[E, A, B], check2:
Check[E, B, C]) extends Check[E, A, C] {
//   def apply(a: A)(implicit s: Semigroup[E]): Validated[E, C] =
//     check1(a).withEither(_.flatMap(b => check2(b).toEither))
//   }
  
//   final case class Pure[E, A, B](func: A => Validated[E, B]) extends
Check[E, A, B] {
//     def apply(a: A)(implicit s: Semigroup[E]): Validated[E, B] = func(a)
//   }
  
//   final case class PurePredicate[E, A](pred: Predicate[E, A]) extends
Check[E, A, A] {
//     def apply(a: A)(implicit s: Semigroup[E]): Validated[E, A] = pred(a)
//   }
  
//   def apply[E, A](pred: Predicate[E, A]): Check[E, A, A] =
PurePredicate(pred)
//   def apply[E, A, B](func: A => Validated[E, B]): Check[E, A, B] =
Pure(func)
  
// }

object PredicatesAndChecksExercise {
    import Predicate._
  
  def checkOver5: Predicate[List[String], Int] = Pure { input => 
    input match {
      case i if i > 5 => Valid(i)
      case i => Invalid(List(s"$i is not >5!"))
    } 
  }
  
    def checkOver10: Predicate[List[String], Int] = Pure { input => 
    input match {
      case i if i > 10 => Valid(i)
      case i => Invalid(List(s"$i is not >10!"))
    } 
  }
  
  def checkAnd: Predicate[List[String], Int] = checkOver5 and checkOver10
  def checkOr: Predicate[List[String], Int] = checkOver5 or checkOver10
  
  def run: Unit = {
    val pred1 = checkAnd(6)
    val pred2 = checkOr(6)
    println(s"checkAnd: $pred1, checkOr: $pred2")
    
//     val check = Check(checkOr).map(_.toString + "!")(8)
//     val check2 = Check(checkAnd)(85)
//     println(s"check: $check, check2: $check2")
    
//     val andThenCheck = Check(checkOr).map(_ +
2).andThen(Check(checkAnd))(6)
//     println(s"andThenCheck: $andThenCheck")
    
  }
}

object DataValidationExercise {  
  
  type Errors = NonEmptyList[String]
  type Result[A] = Either[Errors, A]
  type Check[A, B] = Kleisli[Result, A, B]
  
  def check[A, B](func: A => Result[B]): Check[A, B] = Kleisli(func)
  def checkPred[A](pred: Predicate[Errors, A]): Check[A, A] = Kleisli[Result,
A, A](pred.run)
  
  final case class User(userName: String, email: String)
  def createUser(userName: String, email: String): Either[Errors, User] = {
    (checkUsername(userName), checkEmail(email) ).mapN(User)
  }

  def error(s: String): Errors = NonEmptyList(s, Nil)

  def longerThan(n: Int): Predicate[Errors, String] = 
    Predicate.lift(error(s"Must be longer than $n chars!") , str => str.size >
n)
  def alphanumeric: Predicate[Errors, String] = 
    Predicate.lift(error(s"Must be alphanumeric!"), str =>
str.forall(_.isLetterOrDigit))
  def contains(c: Char): Predicate[Errors, String] = 
    Predicate.lift(error(s"Must contain $c"), str => str.contains(c) )
  
  val checkUsername = checkPred(longerThan(3) and alphanumeric)
  
  val splitEmail: Check[String, (String, String)] = 
    check( _.split('@') match {
      case Array(name, domain) =>  
        Right((name, domain))
      case _ => Left(error("Must contain a single @ character"))
      })

  val checkLeft: Check[String, String] = checkPred(longerThan(0))
  val checkRight: Check[String, String] = checkPred(longerThan(3) and
contains('.'))
  val joinEmail: Check[(String, String), String] = check { 
    case (l, r) => (checkLeft(l), checkRight(r)).mapN(_ + "@" + _)
   }
  val checkEmail: Check[String, String] = splitEmail andThen joinEmail
  
  def main(args: Array[String]): Unit = {
    val createdUserResult = createUser("Pinky", "pinky-the-cat@mail.com")
    println(createdUserResult)
  }
}
